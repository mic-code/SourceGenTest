using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace SourceGen
{
    [Generator]
    public class MySourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Define the attribute
            context.RegisterPostInitializationOutput(ctx =>
            {
                var attributeSource = @"// <auto-generated/>
namespace SourceGenAttribute
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class GenStuffAttribute : System.Attribute
    {
    }
}";
                ctx.AddSource("GenStuffAttribute.g.cs", SourceText.From(attributeSource, Encoding.UTF8));
            });

            // Find classes with the attribute
            IncrementalValuesProvider<INamedTypeSymbol> classDeclarations = context.SyntaxProvider
                .ForAttributeWithMetadataName(
                    "SourceGenAttribute.GenStuffAttribute",
                    (node, _) => node is ClassDeclarationSyntax,
                    (generatorAttributeSyntaxContext, _) => (INamedTypeSymbol)generatorAttributeSyntaxContext.TargetSymbol);

            // Generate extension methods
            context.RegisterSourceOutput(classDeclarations, (spc, classSymbol) =>
            {
                if (classSymbol.ContainingNamespace.IsGlobalNamespace)
                {
                    return;
                }
                var className = classSymbol.Name;
                var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

                var source = $@"// <auto-generated/>
namespace {namespaceName}
{{
    public static class {className}Extensions
    {{
        public static string GeneratedMethod(this {className} obj)
        {{
            return $""Hello from generated extension method for {className}!"";
        }}
    }}
}}";

                spc.AddSource($"{className}Extensions.g.cs", SourceText.From(source, Encoding.UTF8));
            });
        }
    }
}